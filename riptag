#!/bin/bash

### Functions definitions
### ------------------------------------------------------------

print_help () {
	echo -e "USAGE: rip-ninja [OPTIONS]\nStill have to figure out how to do a good help page, please come back later."
}

echoerr () { 
    echo "$@" 1>&2; 
    exit 1
}

overwrite_prompt () {
	echo -e "Warning! It seems that $1 already exists in the $MUSIC_DIR directory.\nOverwrite files? (y/n)"
	read user_input

	if [ "$user_input" != "y" ] && [ "$user_input" != "Y" ]
	then
		echo "Aborted."
		exit 1
	fi
}

### ------------------------------------------------------------

## Start of the script - parsing command line arguments
## Poudly stolen from stackoverflow

UNKNOWN_OPTION=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -o|--output-directory)
      OUTPUT_DIR="$2"
      shift # past argument
      shift # past value
      ;;
    -f|--format)
      FORMAT="$2"
      shift # past argument
      shift # past value
      ;;
    *)    # unknown option
      UNKNOWN_OPTION+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

set -- "${UNKNOWN_OPTION[@]}" # restore position of unknown args array

# Checking if user provided a format supported by ffmpeg
if [ ! -z $FORMAT ]
then
    ffmpeg -formats -hide_banner | tail -n +5 | awk '{ print $2 }' | grep $FORMAT --quiet || echoerr "Provided format is not supported. Isuue 'ffmpeg -formats' to list all the available formats."
fi

# Ripping cd into wave files
cd $OUTPUT_DIR || exit 1
cdparanoia --search-for-drive --batch

# Converting ripped wave files into flacs if user passed --output-format argument
if [ ! -z $FORMAT ]
then
    for track in *;
    do
	    ffmpeg -i $track $OUTPUT_DIR/$track.$FORMAT || exit 1
        rm $track
    done
fi
